image: ${ARTIFACTORY_SERVER}/dockerhub-remote/python:3.7-alpine

services:
  - ${ARTIFACTORY_SERVER}/dockerhub-remote/docker:dind


stages:
  - smoke-tests
  - release_test_prep
  - sprinkle-tests
  - droplets
  - publish
  - release

variables:
  GIT_SUBMODULE_STRATEGY: recursive

# release prep - updates runtime-init location used for testing
template2_prep_release_testing:
  image: ${ARTIFACTORY_SERVER}/dockerhub-remote/node:8
  stage: release_test_prep
  only:
    variables:
      - $RELEASE_RUNTIME_INIT_TESTS == "true"
  tags:
    - docker-executor
  script:
    # install packages: jq
    - apt-get update
    - apt-get install -y jq
    # Configuring SSH
    - eval $(ssh-agent -s)
    - test "$GIT_SSH_USER_PRIVATE_KEY" && (echo "$GIT_SSH_USER_PRIVATE_KEY" | tr -d '\r' | ssh-add -)
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$GIT_SSH_USER_PUBLIC_KEY" >> ~/.ssh/id_rsa.pub
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    # Updating delivery url
    - echo 'Perparing for template2 release testing'
    - echo 'Updating runtime-init delivery location for template testing'
    - RELEASE_VERSION=$(echo $VERSION | awk -F"-" '{ print $2 }')
    - RELEASE_BUILD=$(echo $VERSION | awk -F"-" '{ print $3 }')
    - RELEASE_DELIVERY_LOCATION=$(echo https://cdn.f5.com/product/cloudsolutions/f5-bigip-runtime-init/v$RELEASE_VERSION/dist/f5-bigip-runtime-init-$RELEASE_VERSION-$RELEASE_BUILD.gz.run)
    - echo "Release Runtime-init delivery location:" $RELEASE_DELIVERY_LOCATION
    - echo "Current autoscale Runtime-init delivery location" $(cat examples/modules/bigip-autoscale/bigip.json | jq .parameters.runtimeInitPackageUrl.defaultValue)
    - jq '.parameters.runtimeInitPackageUrl.defaultValue = "'"$RELEASE_DELIVERY_LOCATION"'"' examples/modules/bigip-autoscale/bigip.json > bigip.$$.json && mv bigip.$$.json examples/modules/bigip-autoscale/bigip.json
    - echo "Updated autoscale Runtime-init delivery location" $(cat examples/modules/bigip-autoscale/bigip.json | jq .parameters.runtimeInitPackageUrl.defaultValue)
    - echo "Current standalone Runtime-init delivery location" $(cat examples/modules/bigip-standalone/bigip.json | jq .parameters.runtimeInitPackageUrl.defaultValue)
    - jq '.parameters.runtimeInitPackageUrl.defaultValue = "'"$RELEASE_DELIVERY_LOCATION"'"' examples/modules/bigip-standalone/bigip.json > bigip.$$.json && mv bigip.$$.json examples/modules/bigip-standalone/bigip.json
    - echo "Updated standalone Runtime-init delivery location" $(cat examples/modules/bigip-standalone/bigip.json | jq .parameters.runtimeInitPackageUrl.defaultValue)
    # Config Git
    - git config user.name $GITLAB_USER_LOGIN
    - git config user.email $GITLAB_USER_EMAIL
    # Pushing changes to GIT
    - git status
    - git add -f examples/modules/bigip-autoscale/bigip.json
    - git add -f examples/modules/bigip-standalone/bigip.json
    - git commit -m "Release committed examples/modules/bigip-autoscale/bigip.json and examples/modules/bigip-standalone/bigip.json to $CI_COMMIT_REF_NAME branch" || echo "No changes, nothing to commit!"
    - git remote rm origin && git remote add origin ${GIT_USER}:$CI_PROJECT_PATH.git
    - git push origin HEAD:$CI_COMMIT_REF_NAME

# run arm-ttk against all templates
run_arm_lint:
  image: ${ARTIFACTORY_SERVER}/dockerhub-remote/hawaku/arm-ttk
  stage: smoke-tests
  tags:
    - docker-executor
  except:
    refs:
      - schedules
      - triggers
      - pipelines
  script:
    - templates=$(find examples -name *.json ! -name *.parameters.json ! -name sample_linked.json)
    - for t in $templates; do echo "Testing template $t"; bash /arm-ttk/Test-AzTemplate.sh -TemplatePath $t -Test \"adminUsername Should Not Be A Literal\",\"Deployment Resources Must Not Be Debug\",\"Dynamic Variable References Should Not Use Concat\",\"Min And Max Value Are Numbers\",\"Outputs Must Not Contain Secrets\",\"Parameters Must Be Referenced\",\"Parameters Property Must Exist\",\"providers apiVersions Is Not Permitted\",\"Resources Should Have Location\",\"Secure String Parameters Cannot Have Default\",\"Variables Must Be Referenced\",\"Virtual Machines Should Not Be Preview\",\"VM Size Should Be A Parameter\" || continue; done

## disabling this for now, need to work on checking links that have not been published yet
# validate README file(s) only contain links that respond with 200 OK
run_link_checker:
  image: ${ARTIFACTORY_SERVER}/dockerhub-remote/node:10
  stage: smoke-tests
  tags:
    - docker-executor
  only:
    refs:
      # the current intent is to run only on main and release branches
      - main
      - /^R.*/
  except:
    refs:
      - schedules
      - triggers
      - pipelines
    variables:
      - $RELEASE_RUNTIME_INIT_TESTS == "true"
  script:
    - make link_check

# validate parameters match style guide
verify_parameters_match_style_guide:
  stage: smoke-tests
  tags:
    - docker-executor
  except:
    refs:
      - schedules
      - triggers
      - pipelines
  script:
    - apk add --no-cache build-base
    - apk add --no-cache bash
    - make run_compare_parameters
    - make run_expected_diff
  artifacts:
      paths:
          - parameter-parser/parameters_diff.yaml
          - parameter-parser/parameters_config.yaml
      when: always
      expire_in: 1 week

# validate outputs match style guide
verify_outputs_match_style_guide:
  stage: smoke-tests
  tags:
    - docker-executor
  except:
    refs:
      - schedules
      - triggers
      - pipelines
  script:
    - apk add --no-cache build-base
    - apk add --no-cache bash
    - make run_compare_outputs
    - make run_expected_outputs_diff
  artifacts:
    paths:
      - parameter-parser/outputs_diff.yaml
      - parameter-parser/outputs_config.yaml
    when: always
    expire_in: 1 week

# Azure Template Modules Tests
# Module: Access Template

# This job passes in the test plan to the sprinkler.py script that parses the plan and triggers the dewdrop_test_run
# This job is to be scheduled once the plan has been solidified
# Environment variables:
#   TEST_POLICY: path to test plan, this gets set under the scheduling in gitlab
#   STACK_TYPE: index for elastic search logging, this is set under the scheduling in gitlab
#   DAILY_TEST_TOKEN: token used to trigger git pipeline from the sprinkler script
#   CI_COMMIT_REF_NAME: branch name
azure_access_module_test_job:
  stage: sprinkle-tests
  tags:
    - docker-executor
  only:
    refs:
      - branches
    changes:
      - automated-test-scripts/data/f5-azure-arm-templates-v2/examples/modules/access/*
      - automated-test-scripts/f5-azure-arm-templates-v2/examples/modules/access/*
      - examples/modules/access/access.json
  except:
    refs:
      - schedules
      - triggers
      - pipelines
    variables:
      - $RELEASE_RUNTIME_INIT_TESTS == "true"
  variables:
    TEST_POLICY: automated-test-scripts/data/f5-azure-arm-templates-v2/examples/modules/access/test_policy.yaml
    STACK_TYPE: dewdrop-preproduction
  script:
    - pip install -r cloud-tools/master-job/requirements.txt
    - cloud-tools/master-job/sprinkler.py --test-plan $TEST_POLICY --token $CI_JOB_TOKEN --branch $CI_COMMIT_REF_NAME --stack-type $STACK_TYPE --project-id $CI_PROJECT_ID
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

# Module: Network Template
azure_network_module_test_job:
  stage: sprinkle-tests
  tags:
    - docker-executor
  only:
    refs:
      - branches
    changes:
      - automated-test-scripts/data/f5-azure-arm-templates-v2/examples/modules/network/*
      - automated-test-scripts/f5-azure-arm-templates-v2/examples/modules/network/*
      - examples/modules/network/network.json
  except:
    refs:
      - schedules
      - triggers
      - pipelines
    variables:
      - $RELEASE_RUNTIME_INIT_TESTS == "true"
  variables:
    TEST_POLICY: automated-test-scripts/data/f5-azure-arm-templates-v2/examples/modules/network/test_policy.yaml
    STACK_TYPE: dewdrop-preproduction
  script:
    - pip install -r cloud-tools/master-job/requirements.txt
    - cloud-tools/master-job/sprinkler.py --test-plan $TEST_POLICY --token $CI_JOB_TOKEN --branch $CI_COMMIT_REF_NAME --stack-type $STACK_TYPE --project-id $CI_PROJECT_ID
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

# Module: Application Template
azure_application_module_test_job:
  stage: sprinkle-tests
  tags:
    - docker-executor
  only:
    refs:
      - branches
    changes:
      - automated-test-scripts/data/f5-azure-arm-templates-v2/examples/modules/application/*
      - automated-test-scripts/f5-azure-arm-templates-v2/examples/modules/application/*
      - examples/modules/application/application.json
  except:
    refs:
      - schedules
      - triggers
      - pipelines
    variables:
      - $RELEASE_RUNTIME_INIT_TESTS == "true"
  variables:
    TEST_POLICY: automated-test-scripts/data/f5-azure-arm-templates-v2/examples/modules/application/test_policy.yaml
    STACK_TYPE: dewdrop-preproduction
  script:
    - pip install -r cloud-tools/master-job/requirements.txt
    - cloud-tools/master-job/sprinkler.py --test-plan $TEST_POLICY --token $CI_JOB_TOKEN --branch $CI_COMMIT_REF_NAME --stack-type $STACK_TYPE --project-id $CI_PROJECT_ID
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

# Module: DAG Template
azure_dag_module_test_job:
  stage: sprinkle-tests
  tags:
    - docker-executor
  only:
    refs:
      - branches
    changes:
      - automated-test-scripts/data/f5-azure-arm-templates-v2/examples/modules/dag/*
      - automated-test-scripts/f5-azure-arm-templates-v2/examples/modules/dag/*
      - examples/modules/dag/dag.json
  except:
    refs:
      - schedules
      - triggers
      - pipelines
    variables:
      - $RELEASE_RUNTIME_INIT_TESTS == "true"
  variables:
    TEST_POLICY: automated-test-scripts/data/f5-azure-arm-templates-v2/examples/modules/dag/test_policy.yaml
    STACK_TYPE: dewdrop-preproduction
  script:
    - pip install -r cloud-tools/master-job/requirements.txt
    - cloud-tools/master-job/sprinkler.py --test-plan $TEST_POLICY --token $CI_JOB_TOKEN --branch $CI_COMMIT_REF_NAME --stack-type $STACK_TYPE --project-id $CI_PROJECT_ID
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

# Module: Function Template
azure_function_module_test_job:
  stage: sprinkle-tests
  tags:
    - docker-executor
  only:
    refs:
      - branches
    changes:
      - automated-test-scripts/data/f5-azure-arm-templates-v2/examples/modules/function/*
      - automated-test-scripts/f5-azure-arm-templates-v2/examples/modules/function/*
      - examples/modules/function/function.json
  except:
    refs:
      - schedules
      - triggers
      - pipelines
    variables:
      - $RELEASE_RUNTIME_INIT_TESTS == "true"
  variables:
    TEST_POLICY: automated-test-scripts/data/f5-azure-arm-templates-v2/examples/modules/function/test_policy.yaml
    STACK_TYPE: dewdrop-preproduction
  script:
    - pip install -r cloud-tools/master-job/requirements.txt
    - cloud-tools/master-job/sprinkler.py --test-plan $TEST_POLICY --token $CI_JOB_TOKEN --branch $CI_COMMIT_REF_NAME --stack-type $STACK_TYPE --project-id $CI_PROJECT_ID
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

# Module: bigip autoscale Template
azure_bigip_autoscale_module_test_job:
  stage: sprinkle-tests
  tags:
    - docker-executor
  only:
    refs:
      - branches
    changes:
      - automated-test-scripts/data/f5-azure-arm-templates-v2/examples/modules/bigip-autoscale/*
      - automated-test-scripts/f5-azure-arm-templates-v2/examples/modules/bigip-autoscale/*
      - examples/modules/bigip-autoscale/bigip.json
  except:
    refs:
      - schedules
      - triggers
      - pipelines
  variables:
    TEST_POLICY: automated-test-scripts/data/f5-azure-arm-templates-v2/examples/modules/bigip-autoscale/test_policy.yaml
    STACK_TYPE: dewdrop-preproduction
  script:
    - pip install -r cloud-tools/master-job/requirements.txt
    - cloud-tools/master-job/sprinkler.py --test-plan $TEST_POLICY --token $CI_JOB_TOKEN --branch $CI_COMMIT_REF_NAME --stack-type $STACK_TYPE --project-id $CI_PROJECT_ID
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

# Module: bigip standalone Template
azure_bigip_standalone_module_test_job:
  stage: sprinkle-tests
  tags:
    - docker-executor
  only:
    refs:
      - branches
    changes:
      - automated-test-scripts/data/f5-azure-arm-templates-v2/examples/modules/bigip-standalone/*
      - automated-test-scripts/f5-azure-arm-templates-v2/examples/modules/bigip-standalone/*
      - examples/modules/bigip-standalone/bigip.json
  except:
    refs:
      - schedules
      - triggers
      - pipelines
  variables:
    TEST_POLICY: automated-test-scripts/data/f5-azure-arm-templates-v2/examples/modules/bigip-standalone/test_policy.yaml
    STACK_TYPE: dewdrop-preproduction
  script:
    - pip install -r cloud-tools/master-job/requirements.txt
    - cloud-tools/master-job/sprinkler.py --test-plan $TEST_POLICY --token $CI_JOB_TOKEN --branch $CI_COMMIT_REF_NAME --stack-type $STACK_TYPE --project-id $CI_PROJECT_ID
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

# Module: Autoscale Template
azure_autoscale_example_test_job:
  stage: sprinkle-tests
  tags:
    - docker-executor
  only:
    refs:
      - branches
    changes:
      - automated-test-scripts/data/f5-azure-arm-templates-v2/examples/autoscale/*
      - automated-test-scripts/f5-azure-arm-templates-v2/examples/autoscale/*
      - examples/autoscale/bigiq/azuredeploy.json
      - examples/autoscale/payg/azuredeploy.json
  except:
    refs:
      - schedules
      - triggers
      - pipelines
  variables:
    TEST_POLICY: automated-test-scripts/data/f5-azure-arm-templates-v2/examples/autoscale/test_policy.yaml
    STACK_TYPE: dewdrop-preproduction
  script:
    - pip install -r cloud-tools/master-job/requirements.txt
    - cloud-tools/master-job/sprinkler.py --test-plan $TEST_POLICY --token $CI_JOB_TOKEN --branch $CI_COMMIT_REF_NAME --stack-type $STACK_TYPE --project-id $CI_PROJECT_ID
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

# Module: Quickstart Template
azure_quickstart_example_test_job:
  stage: sprinkle-tests
  tags:
    - docker-executor
  only:
    refs:
      - branches
    changes:
      - automated-test-scripts/data/f5-azure-arm-templates-v2/examples/quickstart/*
      - automated-test-scripts/f5-azure-arm-templates-v2/examples/quickstart/*
      - examples/quickstart/azuredeploy.json
  except:
    refs:
      - schedules
      - triggers
      - pipelines
  variables:
    TEST_POLICY: automated-test-scripts/data/f5-azure-arm-templates-v2/examples/quickstart/test_policy.yaml
    STACK_TYPE: dewdrop-preproduction
  script:
    - pip install -r cloud-tools/master-job/requirements.txt
    - cloud-tools/master-job/sprinkler.py --test-plan $TEST_POLICY --token $CI_JOB_TOKEN --branch $CI_COMMIT_REF_NAME --stack-type $STACK_TYPE --project-id $CI_PROJECT_ID
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

# end of Azure Template Modules Tests

pre_release_test_job:
  stage: sprinkle-tests
  tags:
    - docker-executor
  only:
    refs:
      - main
  except:
    variables:
      - $ANALYTICS_MESSAGE_PROCESS == "true"
      - $ANALYTICS_SCRIPTS_PROCESS == "true"
      - $VERIFY_REGKEY_COUNT == "true"
      - $REAPER_RUN == "true"
      - $DAILY_TESTS_MONITOR == "true"
      - $RELEASE_RUNTIME_INIT_TESTS == "true"
    refs:
      - schedules
      - triggers
      - pipelines
  variables:
    TEST_POLICY: automated-test-scripts/data/test_policies/pre_release_test.yaml
    STACK_TYPE: dewdrop-preproduction
  script:
    - pip install -r cloud-tools/master-job/requirements.txt
    - cloud-tools/master-job/sprinkler.py --test-plan $TEST_POLICY --token $CI_JOB_TOKEN --branch $CI_COMMIT_REF_NAME --stack-type $STACK_TYPE --project-id $CI_PROJECT_ID
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

post_release_test_job:
  stage: sprinkle-tests
  tags:
    - docker-executor
  only:
    - schedules
  except:
    variables:
      - $ANALYTICS_MESSAGE_PROCESS == "true"
      - $ANALYTICS_SCRIPTS_PROCESS == "true"
      - $VERIFY_REGKEY_COUNT == "true"
      - $REAPER_RUN == "true"
      - $DAILY_TESTS_MONITOR == "true"
      - $RELEASE_RUNTIME_INIT_TESTS == "true"
  variables:
    TEST_POLICY: automated-test-scripts/data/test_policies/post_release_test.yaml
    STACK_TYPE: dewdrop-preproduction
  # Added a manual trigger for now so that this job doesn't get triggered after every commit
  when: manual
  script:
    - pip install -r cloud-tools/master-job/requirements.txt
    - cloud-tools/master-job/sprinkler.py --test-plan $TEST_POLICY --token $CI_JOB_TOKEN --branch $CI_COMMIT_REF_NAME --stack-type $STACK_TYPE --project-id $CI_PROJECT_ID
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

scheduled_test_job:
  stage: sprinkle-tests
  tags:
    - docker-executor
  only:
    - schedules
  except:
    variables:
      - $ANALYTICS_MESSAGE_PROCESS == "true"
      - $ANALYTICS_SCRIPTS_PROCESS == "true"
      - $VERIFY_REGKEY_COUNT == "true"
      - $REAPER_RUN == "true"
      - $DAILY_TESTS_MONITOR == "true"
  variables:
    TEST_POLICY: set in schedule!
    STACK_TYPE: dewdrop-production
  script:
    - pip install -r cloud-tools/master-job/requirements.txt
    - cloud-tools/master-job/sprinkler.py --test-plan $TEST_POLICY --token $CI_JOB_TOKEN --branch $CI_COMMIT_REF_NAME --stack-type $STACK_TYPE --project-id $CI_PROJECT_ID
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure


# Push the examples/ folder to CDN when a tag in the form of "publish-v9.0.0.0" is added to the main branch
publish_azure_modules_cdn:
  image: ${ARTIFACTORY_SERVER}/dockerhub-remote/node:8
  stage: publish
  only:
    - /(^publish-(v\d*[1-9]*\.)(\d).(\d).(\d))/
  script:
    # publish azure modules to F5 CDN into $VERSION directory
    # install jq
    - apt-get update
    - apt-get install -y jq
    - VERSION=$(cat f5-azure-arm-templates-v2/examples/autoscale/payg/azuredeploy.json | jq -r ".contentVersion")
    - echo "Version:${VERSION}"
    - CDN_FOLDER="f5-azure-arm-templates-v2"
    - AUTH_OPTS="--username ${CDN_SVC_ACCOUNT_USER} --password ${CDN_SVC_ACCOUNT_PWD} --non-interactive"
    - svn co ${F5_CDN_SVN_ROOT}/cloudsolutions/${CDN_FOLDER} ${AUTH_OPTS}
    - mkdir -p ${CDN_FOLDER}/v${VERSION}
    - cp -r f5-azure-arm-templates-v2/examples ${CDN_FOLDER}/v${VERSION}
    - cd ${CDN_FOLDER}
    - status=$(svn status)
    - if echo "$status" | grep -F '?'; then svn add v${VERSION}; else echo "No new directory to add"; fi
    - changed_files_count=$(svn diff --summarize | wc -l)
    - if [[ $changed_files_count -ge 1 ]]; then svn add --force v${VERSION}/*; svn commit -m "F5 automation templates project automation - ${CI_COMMIT_REF_NAME}" ${AUTH_OPTS}; else echo "RPM files unchanged"; fi
  tags:
    - cm-official-docker-executor

# This job gets triggered by the sprinkler.py script that get ran by the 'master_test_job' it ingests TEMPLATE_URL
# and TEMPLATE_PARAMETERS which are passed down by the sprinkler.py script. Using the variables runs dewdrop with
# the set environment variables
dewdrop_test_run:
  image: ${ARTIFACTORY_SERVER}/ecosystems-cloudsolutions-docker-dev/dewdrop:$DEWDROP_IMAGE_ID
  stage: droplets
  tags:
    - docker-executor
  variables:
    SSH_KEY: "$SSH_KEY"
    AZURE_TENANT_ID: "$AZURE_TENANT_ID"
    AZURE_CLIENT_ID: "$AZURE_CLIENT_ID"
    AZURE_SERVICE_PRINCIPAL: "$AZURE_SERVICE_PRINCIPAL"
    AZURE_SUBSCRIPTION_ID: "$AZURE_SUBSCRIPTION_ID"
    TEMPLATE_URL: "$TEMPLATE_URL"
    TEMPLATE_PARAMETERS: "$TEMPLATE_PARAMETERS"
    STACK_TYPE: "$STACK_TYPE"
    GITLAB_JOB_URL: "$CI_JOB_URL"
  only:
    variables:
      - $RUN_SCHEDULED_DEWDROP_TEST == "true"
  script:
    # the dewdrop image itself does not contain any test files, so ensure dewdrop
    # is run from the known location where test policies expect it to be
    # location: root of the cloud factory repository
    - if [ "$CLOUD_PROVIDER_ENVIRONMENT" == "aws_china" ]; then
    -   AWS_DEFAULT_REGION=$AWS_CHINA_DEFAULT_REGION
    -   AWS_ACCESS_KEY_ID=$AWS_CHINA_ACCESS_KEY_ID
    -   AWS_SECRET_ACCESS_KEY=$AWS_CHINA_SECRET_ACCESS_KEY
    - fi
    - python /dewdrop/dewdrop-docker.py

publish_to_github:
  stage: release
  only:
    - /(^publish-(v\d*[1-9]*\.)(\d).(\d).(\d))/
  script:
    - apk add --no-cache jq
    # Execute Release script to push source to github repo
    - ./release-tool/publish_github.sh "$ALLOWED_DIRS" "$ALLOWED_FILES"
  variables:
    ALLOWED_DIRS: "examples .github images"
    ALLOWED_FILES: ".gitignore README.md azure-offer-list.yaml azure-timezone-list.md SUPPORT.md"
    GITLAB_API_URL: "$AZURE_V2_URL"
    GITHUB_API_TOKEN: "$AZURE_V2_GITHUB_API_TOKEN"
    GITLAB_PRIVATE_TOKEN: "$AZURE_V2_GITLAB_API_TOKEN"
